events {
    worker_connections 1024;
}

http {
    # Include MIME types
    include       mime.types;
    default_type  application/octet-stream;

    # -----------------------------
    # 1) HTTP Server Block
    # -----------------------------
    # This catches HTTP (port 80) requests for both secretbay.me and www.secretbay.me
    # and redirects them to HTTPS.
    server {
        listen 80;
        server_name secretbay.me www.secretbay.me;

        # Return 301 (permanent redirect) to the same host + request URI but using HTTPS
        return 301 https://$host$request_uri;
    }

    # -------------------------------------------------
    # 2) HTTPS Server Block (serving the Angular app)
    # -------------------------------------------------
    server {
        listen              443 ssl http2;
        server_name         secretbay.me www.secretbay.me;

        # Paths to your SSL certificate and key
        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;

        # (Optional) You can add more SSL hardening, e.g.:
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers HIGH:!aNULL:!MD5;
        # add_header Strict-Transport-Security "max-age=31536000" always;

        # -----------------------------------------------------
        # Root folder for the Angular applicationâ€™s build output
        # -----------------------------------------------------
        root /usr/share/nginx/html;
        index index.html;

        # Main location block
        location / {
            # Try to serve files directly, or fall back to index.html
            # This is needed for Angular client-side routing to work
            try_files $uri $uri/ /index.html;
        }

        # Example of a separate location if you have a specific file
        # that needs special handling:
        location = /login.html {
            try_files $uri =404;
        }

        # ------------------------------------------
        # Proxy /api/ to the backend application
        # ------------------------------------------
        location /api/ {
            proxy_pass http://5.101.180.12:8443/api/;

            # Pass necessary headers to the backend
            proxy_set_header Host               $host;
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto  $scheme;
        }
    }
}